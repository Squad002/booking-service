openapi: 3.0.1
info:
  title: Booking Service API
  description: Booking from GoOutSafe with Microservices
  version: "0.1"
servers:
  - url: /
paths:
  /bookings:
    post:
      tags:
        - Booking
      summary: Create a new booking
      x-openapi-router-controller: microservice.views.booking_view
      operationId: insert_booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        "201":
          description: Created booking
        "404":
          description: No free table for the booking
    get:
      tags:
        - Booking
      summary: Get all the bookings
      x-openapi-router-controller: microservice.views.booking_view
      operationId: bookings_list
      parameters:
        - in: query
          name: user_id
          required: false
          description: User id
          schema:
            type: integer
        - in: query
          name: restaurant_id
          required: false
          description: Restaurant id
          schema:
            type: integer
        - in: query
          name: table_id
          required: false
          description: Table id
          schema:
            type: integer
      responses:
        "200":
          description: "Bookings list"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Booking checkin"
  /bookings/{booking_number}:
    delete:
      tags:
        - Booking
      summary: Delete the booking of user_id identified by booking_number
      x-openapi-router-controller: microservice.views.booking_view
      operationId: delete_booking
      parameters:
        - in: path
          name: booking_number
          required: true
          description: Booking number
          schema:
            type: integer
        - in: query
          name: user_id
          required: true
          description: User id
          schema:
            type: integer
      responses:
        "200":
          description: Booking deleted
  /booking/confirm:
    post:
      tags:
        - Booking
      summary: Confirm a booking
      x-openapi-router-controller: microservice.views.booking_view
      operationId: confirm_booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking confirm"
      responses:
        "201":
          description: Booking confirmed
        "404":
          description: Booking not found
        "401":
          description: Booking error
  /bookings/{booking_number}/checkin:
    get:
      tags:
        - Booking
      summary: Return if booking was confirmed and checkin was done
      x-openapi-router-controller: microservice.views.booking_view
      operationId: checkin_booking_check
      parameters:
        - in: path
          name: booking_number
          required: true
          description: Booking identifier
          schema:
            type: integer
      responses:
        "200":
          description: Flag for checkin and booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkin booking"
        "404":
          description: Booking not found
  /reservations:
    get:
      tags:
        - Reservation
      summary: Return all bookings of restaurant_id of a specific day
      x-openapi-router-controller: microservice.views.reservation_view
      operationId: reservations_list
      parameters:
        - in: query
          name: restaurant_id
          required: True
          description: Restaurant identifier
          schema:
            type: integer
        - in: query
          name: start_day
          required: True
          description: Day of reservations
          example: "2020-11-22"
          schema:
            type: string
      responses:
        "200":
          description: "Reservations list"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Reservations"
  /reservations/{booking_number}:
    get:
      tags:
        - Reservation
      summary: Return the list of users of the reservation identified by booking_number
      x-openapi-router-controller: microservice.views.reservation_view
      operationId: reservation
      parameters:
        - in: path
          name: booking_number
          required: true
          description: Booking identifier
          example: 1
          schema:
            type: integer
      responses:
        "200":
          description: User list
        "404":
          description: Reservation not found
    delete:
      tags:
        - Reservation
      summary: Delete all reservations identified by booking_number
      x-openapi-router-controller: microservice.views.reservation_view
      operationId: delete_reservations
      parameters:
        - in: path
          name: booking_number
          required: true
          description: Booking identifier
          example: 1
          schema:
            type: integer
      responses:
        "200":
          description: Reservations deleted
  /reservations/{booking_number}/permissions:
    get:
      tags:
        - Reservation
      summary: Check if operator_id has the permissions
      x-openapi-router-controller: microservice.views.reservation_view
      operationId: check_permissions_operator
      parameters:
        - in: path
          name: booking_number
          required: true
          description: Booking identifier
          example: 1
          schema:
            type: integer
        - in: query
          name: operator_id
          required: true
          description: Operator identifier
          example: 1
          schema:
            type: integer
        - in: query
          name: restaurant_id
          required: true
          description: Restaurant identifier
          example: 1
          schema:
            type: integer
      responses:
        "200":
          description: Operator has the permissions
        "403":
          description: Operator hasn't the permissions
  /reservations/checkin:
    post:
      tags:
        - Reservation
      summary: Do the check-in of the user in user_list for the booking identified by booking_number
      x-openapi-router-controller: microservice.views.reservation_view
      operationId: checkin_booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation checkin"
      responses:
        "200":
          description: Checkin done
        "404":
          description: "Booking not found"

components:
  schemas:
    Booking:
      required:
        - user_id
        - restaurant_id
        - booking_number
        - start_booking
        - end_booking
        - seats
      type: object
      properties:
        user_id:
          type: integer
          description: User identifier
          example: 1
        restaurant_id:
          type: integer
          description: Restaurant identifier
          example: 1
        booking_number:
          type: integer
          description: Booking identifier
          readOnly: true
          example: 1
        start_booking:
          type: string
          description: Start date and hour of booking
          example: "2020-11-05 10:30"
        end_booking:
          type: string
          description: Start date and hour of booking
          example: "2020-11-05 12:00"
        confirmed_booking:
          type: boolean
          description: It specify if the booking was confirmed
          example: True
        seats:
          type: integer
          description: Number of people for this booking
          example: 5

    Booking checkin:
      allOf:
        - $ref: "#/components/schemas/Booking"
        - type: object
          required:
            - checkin
            - table_id
          properties:
            checkin:
              type: boolean
              description: Indicate if the checkin was done or not
              example: True
            table_id:
              type: integer
              description: Table identifier
              example: 1

    Booking confirm:
      required:
        - booking_number
        - users
      type: object
      properties:
        booking_number:
          type: integer
          description: Unique identifier of the booking
          example: 8
        users:
          type: array
          items:
            $ref: "#/components/schemas/Booking user"

    Booking user:
      required:
        - firstname
        - lastname
        - email
        - fiscal_code
      type: object
      properties:
        firstname:
          type: string
          description: Name of the user
          example: Linus
        lastname:
          type: string
          description: Surname of the user
          example: Torvalds
        email:
          type: string
          description: Email of the user
          example: linus@torvalds.com
        fiscal_code:
          type: string
          description: Fiscalcode of the user
          example: FCGZPX89A57E015V
          maxLength: 16
          minLength: 16

    Checkin booking:
      required:
        - confirmed_booking
        - checkin
      type: object
      properties:
        confirmed_booking:
          type: boolean
          description: Flag for booking
          example: true
        checkin:
          type: boolean
          description: Flag for checkin
          example: false

    Reservations:
      required:
        - booking_number
        - people_number
        - restaurant_name
      type: object
      properties:
        booking_number:
          type: integer
          description: Booking identifier
          example: 1
        people_number:
          type: integer
          description: Number of people for this booking
          example: 3
        restaurant_name:
          type: string
          description: Restaturant's name
          example: "Pizzeria Gino Sorbillo"

    Reservation checkin:
      required:
        - booking_number
        - user_list
      type: object
      properties:
        booking_number:
          type: integer
          description: Booking identifier
          example: 1
        user_list:
          items:
            required:
              - user_id
            properties:
              user_id:
                type: integer
                description: User identifier
                example: 1
